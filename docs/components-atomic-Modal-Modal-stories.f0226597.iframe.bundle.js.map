{"version":3,"file":"components-atomic-Modal-Modal-stories.f0226597.iframe.bundle.js","mappings":";;;;;;;;;;;AAeA;;;;;;;AAOA;AACA;;;;AAIA;;;AAKA;AACA;AACA;AACA;;;;;;AAMA;AACA;;AAMA;AACA;AACA;;;;;;AAQA;;;AAGA;;AAEA;;;;AClDA;AACA;;AAEA;;;AAGA;ACPA;AAOA;AALA;AACA;AACA;AACA","sources":["webpack://web/./src/components/atomic/Modal/style.ts","webpack://web/./src/components/atomic/SvgImage/index.tsx","webpack://web/./src/components/atomic/Text/style.tsx"],"sourcesContent":["import { css, styled } from 'styled-components';\n\nconst modalFadeIn = css`\n  @keyframes modalFadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`;\n\nconst ModalOverlay = styled.div<{ $isOpen: boolean }>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: ${({ $isOpen }) => ($isOpen ? 'flex' : 'none')};\n  padding: 0 ${({ theme }) => theme.spacing.s_188};\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n`;\n\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spacing.s_32};\n  background-color: ${({ theme }) => theme.colors.darkSecondary};\n  border-radius: ${({ theme }) => theme.radius.rounded_large};\n  padding: ${({ theme }) => theme.spacing.s_32};\n  width: 100%;\n  /* min-width: 400px; */\n  /* max-width: 90vw; */\n  /* max-height: 90vh; */\n  overflow-y: auto;\n  animation: ${modalFadeIn} 0.3s ease-out;\n`;\n\nconst ModalHeader = styled.div`\n  position: relative;\n`;\n\nconst ModalBody = styled.div`\n  /* padding: ${({ theme }) => theme.spacing.s_16}; */\n`;\n\nconst CloseButton = styled.div`\n  cursor: pointer;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transition: background-color 0.2s;\n  border-radius: ${({ theme }) => theme.radius.rounded_xsmall};\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.grey};\n  }\n`;\n\nexport { CloseButton, ModalBody, ModalContent, ModalHeader, ModalOverlay };\n","import { Colors } from '@/styles/colors';\nimport styled from 'styled-components';\n\ninterface SvgImageProps {\n  $width?: string;\n  $height?: string;\n  $fill?: keyof Colors;\n}\n\nconst SvgImage = styled.div<SvgImageProps>`\n  display: flex;\n  align-items: center;\n  svg {\n    width: ${({ $width }) => $width};\n    height: ${({ $height }) => $height};\n    path {\n      fill: ${({ theme, $fill }) => ($fill ? theme.colors[$fill] : theme.colors.white)};\n    }\n  }\n`;\n\nexport default SvgImage;\n","import { Colors } from '@/styles/colors';\nimport { FontSizes } from '@/styles/fontSizes';\nimport { FontWeights } from '@/styles/fontWeight';\nimport styled, { css } from 'styled-components';\n\ninterface TextIProps {\n  $color: keyof Colors;\n  $size: keyof FontSizes;\n  $weight: keyof FontWeights;\n}\n\nexport const Text = styled.span<TextIProps>`\n  ${({ theme, $color, $size, $weight }) => {\n    return css`\n      font-size: ${theme.fontSizes[$size]};\n      color: ${theme.colors[$color]};\n      font-weight: ${theme.fontWeights[$weight]};\n    `;\n  }}\n`;\n"],"names":[],"sourceRoot":""}