{"version":3,"file":"components-atomic-FileUpload-FileUpload-stories.2dc5d978.iframe.bundle.js","mappings":";;AAgCA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;;ACpDA;AACA;AACA;;;AAGA;;;AAOA;;AAEA;AANA;AACA;;AAWA;;;;AAIA;AACA;AACA;;AAIA;AACA;AACA;AACA;;;;;;;;;;;AAWA;;AAEA;;ACuCA;;;AC9DA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;ACpCA;AACA;;AAEA;;;AAGA;ACPA;AAOA;AALA;AACA;AACA;AACA","sources":["webpack://web/./src/components/atomic/FlexBox/index.tsx","webpack://web/./src/components/atomic/FileUpload/style.ts","webpack://web/./src/components/atomic/FileUpload/index.tsx","webpack://web/./src/components/atomic/Box/index.tsx","webpack://web/./src/components/atomic/SvgImage/index.tsx","webpack://web/./src/components/atomic/Text/style.tsx"],"sourcesContent":["import { Colors } from '@/styles/colors';\nimport { Spacing } from '@/styles/spacing';\nimport styled, { css, ExecutionContext } from 'styled-components';\n\ninterface FlexBoxProps {\n  $direction?: 'row' | 'column';\n  $justify?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';\n  $align?: 'stretch' | 'flex-start' | 'flex-end' | 'center' | 'baseline';\n  $wrap?: 'nowrap' | 'wrap' | 'wrap-reverse';\n  $gap?: keyof Spacing;\n  $padding?: keyof Spacing;\n  $px?: keyof Spacing;\n  $py?: keyof Spacing;\n  $pl?: keyof Spacing;\n  $pr?: keyof Spacing;\n  $pt?: keyof Spacing;\n  $pb?: keyof Spacing;\n  $margin?: keyof Spacing;\n  $mx?: keyof Spacing;\n  $my?: keyof Spacing;\n  $ml?: keyof Spacing;\n  $mr?: keyof Spacing;\n  $mt?: keyof Spacing;\n  $mb?: keyof Spacing;\n  $backgroundColor?: keyof Colors;\n  $width?: string;\n  $height?: string;\n  $sx?: ((context: ExecutionContext) => ReturnType<typeof css>) | ReturnType<typeof css>;\n}\n\nconst FlexBox = styled.div<FlexBoxProps>`\n  display: flex;\n  flex-direction: ${({ $direction }) => $direction};\n  justify-content: ${({ $justify }) => $justify || 'flex-start'};\n  align-items: ${({ $align }) => $align};\n  gap: ${({ theme, $gap }) => ($gap ? theme.spacing[$gap] : '0')};\n  flex-wrap: ${({ $wrap }) => $wrap || 'nowrap'};\n\n  padding: ${({ theme, $padding, $px, $py }) =>\n    $padding ? theme.spacing[$padding] : `${$py ? theme.spacing[$py] : '0'} ${$px ? theme.spacing[$px] : '0'}`};\n  padding-left: ${({ theme, $pl }) => $pl && theme.spacing[$pl]};\n  padding-right: ${({ theme, $pr }) => $pr && theme.spacing[$pr]};\n  padding-top: ${({ theme, $pt }) => $pt && theme.spacing[$pt]};\n  padding-bottom: ${({ theme, $pb }) => $pb && theme.spacing[$pb]};\n\n  margin: ${({ theme, $margin, $mx, $my }) =>\n    $margin ? theme.spacing[$margin] : `${$my ? theme.spacing[$my] : '0'} ${$mx ? theme.spacing[$mx] : '0'}`};\n  margin-left: ${({ theme, $ml }) => $ml && theme.spacing[$ml]};\n  margin-right: ${({ theme, $mr }) => $mr && theme.spacing[$mr]};\n  margin-top: ${({ theme, $mt }) => $mt && theme.spacing[$mt]};\n  margin-bottom: ${({ theme, $mb }) => $mb && theme.spacing[$mb]};\n\n  width: ${({ $width }) => $width};\n  height: ${({ $height }) => $height};\n  background-color: ${({ theme, $backgroundColor }) =>\n    $backgroundColor ? theme.colors[$backgroundColor] : 'transparent'};\n  ${({ $sx }) => $sx};\n`;\n\nexport default FlexBox;\n","import styled, { css } from 'styled-components';\n\nconst UploadContainer = styled.div<{ $isDragging: boolean }>`\n  width: 100%;\n  height: 100%;\n  border: 1px solid ${({ theme }) => theme.colors.grey};\n  border-radius: ${({ theme }) => theme.radius.rounded_xmedium};\n  background-color: ${({ theme }) => theme.colors.darkSecondary};\n  transition: all 0.2s;\n\n  ${({ $isDragging }) =>\n    $isDragging &&\n    css`\n      background-color: ${({ theme }) => theme.colors.dark};\n    `}\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.dark};\n  }\n`;\n\nconst HiddenInput = styled.input`\n  display: none;\n`;\n\nconst PreviewImage = styled.img`\n  height: 100%;\n  width: 100%;\n  object-fit: cover;\n  border-radius: ${({ theme }) => theme.radius.rounded_small};\n  margin-bottom: ${({ theme }) => theme.spacing.s_16};\n`;\n\nconst RemoveButton = styled.div`\n  position: absolute;\n  top: ${({ theme }) => theme.spacing.s_8};\n  right: ${({ theme }) => theme.spacing.s_8};\n  background: ${({ theme }) => theme.colors.accent};\n  border-radius: ${({ theme }) => theme.radius.rounded_circle};\n\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background: ${({ theme }) => theme.colors.accentSecondary};\n  }\n`;\n\nexport { HiddenInput, PreviewImage, RemoveButton, UploadContainer };\n","import CloseIcon from '@/icons/close.svg';\nimport PlusIcon from '@/icons/plus.svg';\nimport { ChangeEvent, DragEvent, useRef, useState } from 'react';\nimport { css } from 'styled-components';\nimport Box from '../Box';\nimport FlexBox from '../FlexBox';\nimport SvgImage from '../SvgImage';\nimport Text from '../Text';\nimport * as S from './style';\n\ninterface FileUploadProps {\n  onFileSelect: (file: File) => void;\n  accept?: string;\n  maxSize?: number; // in MB\n}\n\nexport const FileUpload = ({ onFileSelect, accept = 'image/*', maxSize = 5 }: FileUploadProps) => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n\n    const file = e.dataTransfer.files[0];\n    if (file && validateFile(file)) {\n      handleFile(file);\n    }\n  };\n\n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileSelect = (e: ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file && validateFile(file)) {\n      handleFile(file);\n    }\n  };\n\n  const handleFile = (file: File) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setPreviewUrl(reader.result as string);\n    };\n    reader.readAsDataURL(file);\n    onFileSelect(file);\n  };\n\n  const handleRemove = () => {\n    setPreviewUrl(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const validateFile = (file: File): boolean => {\n    if (file.size > maxSize * 1024 * 1024) {\n      alert(`Файл слишком большой. Максимальный размер: ${maxSize}MB`);\n      return false;\n    }\n\n    if (accept && !file.type.match(accept.replace('*', '.*'))) {\n      alert('Неподдерживаемый формат файла');\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <S.UploadContainer $isDragging={isDragging}>\n      <FlexBox $direction=\"column\" $align=\"center\" $gap=\"s_8\" $width=\"100%\" $height=\"100%\">\n        {previewUrl ? (\n          <Box\n            $sx={css`\n              position: relative;\n            `}\n            $width=\"100%\"\n            $height=\"100%\"\n          >\n            <S.PreviewImage src={previewUrl} alt=\"Preview\" />\n            <S.RemoveButton onClick={handleRemove}>\n              <SvgImage $height=\"14px\" $width=\"14px\" $fill=\"white\">\n                <CloseIcon />\n              </SvgImage>\n            </S.RemoveButton>\n          </Box>\n        ) : (\n          <FlexBox\n            $direction=\"column\"\n            $align=\"center\"\n            $justify=\"center\"\n            $gap=\"s_12\"\n            $width=\"100%\"\n            $height=\"100%\"\n            $padding=\"s_24\"\n            onClick={handleClick}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n            $sx={css`\n              cursor: pointer;\n            `}\n          >\n            <SvgImage $height=\"20px\" $width=\"20px\" $fill=\"white\">\n              <PlusIcon />\n            </SvgImage>\n\n            <Text color=\"white\" size=\"body_M\">\n              Добавить обложку\n            </Text>\n          </FlexBox>\n        )}\n      </FlexBox>\n      <S.HiddenInput ref={fileInputRef} type=\"file\" accept={accept} onChange={handleFileSelect} />\n    </S.UploadContainer>\n  );\n};\n","import { Colors } from '@/styles/colors';\nimport { Radius } from '@/styles/radius';\nimport { Spacing } from '@/styles/spacing';\nimport styled, { css, ExecutionContext } from 'styled-components';\n\ninterface BoxProps {\n  $width?: string;\n  $height?: string;\n  $backgroundColor?: keyof Colors;\n  $padding?: keyof Spacing;\n  $px?: keyof Spacing;\n  $py?: keyof Spacing;\n  $pl?: keyof Spacing;\n  $pr?: keyof Spacing;\n  $pt?: keyof Spacing;\n  $pb?: keyof Spacing;\n  $margin?: keyof Spacing;\n  $mx?: keyof Spacing;\n  $my?: keyof Spacing;\n  $ml?: keyof Spacing;\n  $mr?: keyof Spacing;\n  $mt?: keyof Spacing;\n  $mb?: keyof Spacing;\n  $radius?: keyof Radius;\n  $sx?: ((context: ExecutionContext) => ReturnType<typeof css>) | ReturnType<typeof css>;\n}\n\nconst Box = styled.div<BoxProps>`\n  width: ${({ $width }) => $width};\n  height: ${({ $height }) => $height};\n  background-color: ${({ theme, $backgroundColor }) =>\n    $backgroundColor ? theme.colors[$backgroundColor] : 'transparent'};\n\n  padding: ${({ theme, $padding, $px, $py }) =>\n    $padding ? theme.spacing[$padding] : `${$py ? theme.spacing[$py] : '0'} ${$px ? theme.spacing[$px] : '0'}`};\n  padding-left: ${({ theme, $pl }) => $pl && theme.spacing[$pl]};\n  padding-right: ${({ theme, $pr }) => $pr && theme.spacing[$pr]};\n  padding-top: ${({ theme, $pt }) => $pt && theme.spacing[$pt]};\n  padding-bottom: ${({ theme, $pb }) => $pb && theme.spacing[$pb]};\n\n  margin: ${({ theme, $margin, $mx, $my }) =>\n    $margin ? theme.spacing[$margin] : `${$my ? theme.spacing[$my] : '0'} ${$mx ? theme.spacing[$mx] : '0'}`};\n  margin-left: ${({ theme, $ml }) => $ml && theme.spacing[$ml]};\n  margin-right: ${({ theme, $mr }) => $mr && theme.spacing[$mr]};\n  margin-top: ${({ theme, $mt }) => $mt && theme.spacing[$mt]};\n  margin-bottom: ${({ theme, $mb }) => $mb && theme.spacing[$mb]};\n\n  border-radius: ${({ theme, $radius }) => $radius && theme.radius[$radius]};\n  ${({ $sx }) => $sx && $sx};\n`;\n\nexport default Box;\n","import { Colors } from '@/styles/colors';\nimport styled from 'styled-components';\n\ninterface SvgImageProps {\n  $width?: string;\n  $height?: string;\n  $fill?: keyof Colors;\n}\n\nconst SvgImage = styled.div<SvgImageProps>`\n  display: flex;\n  align-items: center;\n  svg {\n    width: ${({ $width }) => $width};\n    height: ${({ $height }) => $height};\n    path {\n      fill: ${({ theme, $fill }) => ($fill ? theme.colors[$fill] : theme.colors.white)};\n    }\n  }\n`;\n\nexport default SvgImage;\n","import { Colors } from '@/styles/colors';\nimport { FontSizes } from '@/styles/fontSizes';\nimport { FontWeights } from '@/styles/fontWeight';\nimport styled, { css } from 'styled-components';\n\ninterface TextIProps {\n  $color: keyof Colors;\n  $size: keyof FontSizes;\n  $weight: keyof FontWeights;\n}\n\nexport const Text = styled.span<TextIProps>`\n  ${({ theme, $color, $size, $weight }) => {\n    return css`\n      font-size: ${theme.fontSizes[$size]};\n      color: ${theme.colors[$color]};\n      font-weight: ${theme.fontWeights[$weight]};\n    `;\n  }}\n`;\n"],"names":[],"sourceRoot":""}