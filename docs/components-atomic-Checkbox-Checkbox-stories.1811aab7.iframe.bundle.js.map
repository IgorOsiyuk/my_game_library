{"version":3,"file":"components-atomic-Checkbox-Checkbox-stories.1811aab7.iframe.bundle.js","mappings":";;AAMA;;;AAGA;;;AAKA;AACA;AACA;;;;;;;;;;;AAWA;;;AAGA;;;;;;AAQA;;;;;AAKA;;;;AAIA;;;AAOA;AACA;AASA;AAPA;AACA;AACA;AACA;;AAEA;AClCA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;ACpCA;AACA;;AAEA;;;AAGA;ACPA;AAOA;AALA;AACA;AACA;AACA","sources":["webpack://web/./src/components/atomic/Checkbox/style.ts","webpack://web/./src/components/atomic/Box/index.tsx","webpack://web/./src/components/atomic/SvgImage/index.tsx","webpack://web/./src/components/atomic/Text/style.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport SvgImage from '../SvgImage';\nimport Text from '../Text';\n\nconst CheckboxContainer = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.spacing.s_8};\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst CheckboxIcon = styled.div<{ $isChecked?: boolean; $isError?: boolean }>`\n  width: 20px;\n  height: 20px;\n  background-color: ${({ theme }) => theme.colors.white};\n  border: 2px solid ${({ theme, $isError }) => ($isError ? theme.colors.red : theme.colors.white)};\n  border-radius: ${({ theme }) => theme.radius.rounded_xsmall};\n  transition: all 0.2s ease-in-out;\n  flex-shrink: 0;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0.5;\n  &:hover {\n    opacity: 0.7;\n  }\n  ${SvgImage} {\n    display: none;\n  }\n`;\n\nconst HiddenCheckbox = styled.input`\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n  &:checked + ${CheckboxIcon} {\n    opacity: 0.9;\n    &:hover {\n      opacity: 0.9;\n    }\n    ${SvgImage} {\n      display: block;\n    }\n  }\n`;\n\nconst Label = styled(Text)`\n  cursor: pointer;\n  user-select: none;\n`;\n\nconst Error = styled.div`\n  ${({ theme }) => {\n    return css`\n      padding: ${theme.spacing.s_8} ${theme.spacing.s_12};\n      font-size: ${theme.fontSizes.tech};\n      font-weight: ${theme.fontWeights.medium};\n      color: ${theme.colors.red};\n      width: 100%;\n    `;\n  }}\n`;\n\nexport { CheckboxContainer, CheckboxIcon, Error, HiddenCheckbox, Label };\n","import { Colors } from '@/styles/colors';\nimport { Radius } from '@/styles/radius';\nimport { Spacing } from '@/styles/spacing';\nimport styled, { css, ExecutionContext } from 'styled-components';\n\ninterface BoxProps {\n  $width?: string;\n  $height?: string;\n  $backgroundColor?: keyof Colors;\n  $padding?: keyof Spacing;\n  $px?: keyof Spacing;\n  $py?: keyof Spacing;\n  $pl?: keyof Spacing;\n  $pr?: keyof Spacing;\n  $pt?: keyof Spacing;\n  $pb?: keyof Spacing;\n  $margin?: keyof Spacing;\n  $mx?: keyof Spacing;\n  $my?: keyof Spacing;\n  $ml?: keyof Spacing;\n  $mr?: keyof Spacing;\n  $mt?: keyof Spacing;\n  $mb?: keyof Spacing;\n  $radius?: keyof Radius;\n  $sx?: ((context: ExecutionContext) => ReturnType<typeof css>) | ReturnType<typeof css>;\n}\n\nconst Box = styled.div<BoxProps>`\n  width: ${({ $width }) => $width};\n  height: ${({ $height }) => $height};\n  background-color: ${({ theme, $backgroundColor }) =>\n    $backgroundColor ? theme.colors[$backgroundColor] : 'transparent'};\n\n  padding: ${({ theme, $padding, $px, $py }) =>\n    $padding ? theme.spacing[$padding] : `${$py ? theme.spacing[$py] : '0'} ${$px ? theme.spacing[$px] : '0'}`};\n  padding-left: ${({ theme, $pl }) => $pl && theme.spacing[$pl]};\n  padding-right: ${({ theme, $pr }) => $pr && theme.spacing[$pr]};\n  padding-top: ${({ theme, $pt }) => $pt && theme.spacing[$pt]};\n  padding-bottom: ${({ theme, $pb }) => $pb && theme.spacing[$pb]};\n\n  margin: ${({ theme, $margin, $mx, $my }) =>\n    $margin ? theme.spacing[$margin] : `${$my ? theme.spacing[$my] : '0'} ${$mx ? theme.spacing[$mx] : '0'}`};\n  margin-left: ${({ theme, $ml }) => $ml && theme.spacing[$ml]};\n  margin-right: ${({ theme, $mr }) => $mr && theme.spacing[$mr]};\n  margin-top: ${({ theme, $mt }) => $mt && theme.spacing[$mt]};\n  margin-bottom: ${({ theme, $mb }) => $mb && theme.spacing[$mb]};\n\n  border-radius: ${({ theme, $radius }) => $radius && theme.radius[$radius]};\n  ${({ $sx }) => $sx && $sx};\n`;\n\nexport default Box;\n","import { Colors } from '@/styles/colors';\nimport styled from 'styled-components';\n\ninterface SvgImageProps {\n  $width?: string;\n  $height?: string;\n  $fill?: keyof Colors;\n}\n\nconst SvgImage = styled.div<SvgImageProps>`\n  display: flex;\n  align-items: center;\n  svg {\n    width: ${({ $width }) => $width};\n    height: ${({ $height }) => $height};\n    path {\n      fill: ${({ theme, $fill }) => ($fill ? theme.colors[$fill] : theme.colors.white)};\n    }\n  }\n`;\n\nexport default SvgImage;\n","import { Colors } from '@/styles/colors';\nimport { FontSizes } from '@/styles/fontSizes';\nimport { FontWeights } from '@/styles/fontWeight';\nimport styled, { css } from 'styled-components';\n\ninterface TextIProps {\n  $color: keyof Colors;\n  $size: keyof FontSizes;\n  $weight: keyof FontWeights;\n}\n\nexport const Text = styled.span<TextIProps>`\n  ${({ theme, $color, $size, $weight }) => {\n    return css`\n      font-size: ${theme.fontSizes[$size]};\n      color: ${theme.colors[$color]};\n      font-weight: ${theme.fontWeights[$weight]};\n    `;\n  }}\n`;\n"],"names":[],"sourceRoot":""}