{"version":3,"file":"components-atomic-Select-Select-stories.26ed61a3.iframe.bundle.js","mappings":";;AAwBA;AACA;AACA;;AAEA;;;;;AAKA;;;;;AAKA;;;AAGA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;;;AAGA;;;;AAIA;;;;AAIA;;;;;;;AAOA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;AAGA;;;AAGA;AACA;;AAEA;AACA;;;;;AAKA;AACA;;;;;AAKA;;AAEA;ACjFA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","sources":["webpack://web/./src/components/atomic/Select/index.tsx","webpack://web/./src/components/atomic/Box/index.tsx"],"sourcesContent":["import Select, { ActionMeta, MultiValue, SingleValue } from 'react-select';\nimport styled, { css, ExecutionContext } from 'styled-components';\nimport Box from '../Box';\n\nexport interface SelectOption {\n  value: string;\n  label: string;\n}\n\ninterface CustomSelectProps {\n  options: SelectOption[];\n  value?: SelectOption | SelectOption[];\n  onChange?: (\n    option: SingleValue<SelectOption> | MultiValue<SelectOption>,\n    actionMeta: ActionMeta<SelectOption>,\n  ) => void;\n  placeholder?: string;\n  className?: string;\n  sx?: ((context: ExecutionContext) => ReturnType<typeof css>) | ReturnType<typeof css>;\n  isMulti?: boolean;\n}\n\nconst StyledSelect = styled(Select<SelectOption, boolean>)`\n  .select__control {\n    background-color: ${({ theme }) => theme.colors.darkSecondary};\n    border: 1px solid ${({ theme }) => theme.colors.grey};\n    border-radius: ${({ theme }) => theme.radius.rounded_small};\n    /* min-height: 55px; */\n    padding: ${({ theme }) => theme.spacing.s_8} ${({ theme }) => theme.spacing.s_12};\n    box-shadow: none;\n    cursor: pointer;\n\n    &:hover {\n      border-color: ${({ theme }) => theme.colors.greySecondary};\n    }\n  }\n\n  .select__placeholder {\n    padding-right: ${({ theme }) => theme.spacing.s_12};\n  }\n  .select__menu {\n    background-color: ${({ theme }) => theme.colors.darkSecondary};\n    border: 1px solid ${({ theme }) => theme.colors.grey};\n    border-radius: ${({ theme }) => theme.radius.rounded_small};\n    padding: ${({ theme }) => theme.spacing.s_4};\n  }\n\n  .select__option {\n    padding: ${({ theme }) => theme.spacing.s_8} ${({ theme }) => theme.spacing.s_6};\n    cursor: pointer;\n    border-radius: ${({ theme }) => theme.radius.rounded_small};\n    margin-top: ${({ theme }) => theme.spacing.s_4};\n    &:active {\n      background-color: ${({ theme }) => theme.colors.grey};\n    }\n    &--is-focused {\n      background-color: ${({ theme }) => theme.colors.grey};\n    }\n\n    &--is-selected {\n      background-color: ${({ theme }) => theme.colors.grey};\n      color: white;\n\n      &:hover {\n        background-color: ${({ theme }) => theme.colors.grey};\n      }\n    }\n  }\n  .select__value-container {\n    padding: 0;\n    .select__multi-value {\n      gap: ${({ theme }) => theme.spacing.s_4};\n      background-color: ${({ theme }) => theme.colors.grey};\n      border-radius: ${({ theme }) => theme.radius.rounded_small};\n      padding: ${({ theme }) => theme.spacing.s_4} ${({ theme }) => theme.spacing.s_6};\n      margin: 0;\n      margin-right: ${({ theme }) => theme.spacing.s_4};\n    }\n  }\n  .select__indicator-separator {\n    background-color: ${({ theme }) => theme.colors.grey};\n  }\n  .select__value-container--is-multi {\n    gap: ${({ theme }) => theme.spacing.s_4};\n  }\n  .select__multi-value__remove {\n    padding-left: ${({ theme }) => theme.spacing.s_2};\n    padding-right: ${({ theme }) => theme.spacing.s_2};\n    &:hover {\n      background-color: ${({ theme }) => theme.colors.redSecondary};\n      color: ${({ theme }) => theme.colors.red};\n    }\n  }\n  .select__single-value,\n  .select__multi-value__label {\n    font-size: ${({ theme }) => theme.fontSizes.body_M};\n    color: ${({ theme }) => theme.colors.white};\n    margin: 0;\n  }\n\n  .select__placeholder {\n    color: ${({ theme }) => theme.colors.greySecondary};\n  }\n`;\n\nexport const CustomSelect = ({\n  options,\n  value,\n  onChange,\n  placeholder = 'Выберите опцию',\n  className,\n  sx,\n  isMulti = false,\n}: CustomSelectProps) => {\n  return (\n    <Box $sx={sx}>\n      <StyledSelect\n        closeMenuOnSelect={false}\n        className={className}\n        classNamePrefix=\"select\"\n        options={options}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        isSearchable={false}\n        isClearable\n        isMulti={isMulti}\n      />\n    </Box>\n  );\n};\n","import { Colors } from '@/styles/colors';\nimport { Radius } from '@/styles/radius';\nimport { Spacing } from '@/styles/spacing';\nimport styled, { css, ExecutionContext } from 'styled-components';\n\ninterface BoxProps {\n  $width?: string;\n  $height?: string;\n  $backgroundColor?: keyof Colors;\n  $padding?: keyof Spacing;\n  $px?: keyof Spacing;\n  $py?: keyof Spacing;\n  $pl?: keyof Spacing;\n  $pr?: keyof Spacing;\n  $pt?: keyof Spacing;\n  $pb?: keyof Spacing;\n  $margin?: keyof Spacing;\n  $radius?: keyof Radius;\n  $sx?: ((context: ExecutionContext) => ReturnType<typeof css>) | ReturnType<typeof css>;\n}\n\nconst Box = styled.div<BoxProps>`\n  width: ${({ $width }) => $width};\n  height: ${({ $height }) => $height};\n  background-color: ${({ theme, $backgroundColor }) =>\n    $backgroundColor ? theme.colors[$backgroundColor] : 'transparent'};\n\n  padding: ${({ theme, $padding, $px, $py }) =>\n    $padding ? theme.spacing[$padding] : `${$py ? theme.spacing[$py] : '0'} ${$px ? theme.spacing[$px] : '0'}`};\n  padding-left: ${({ theme, $pl }) => $pl && theme.spacing[$pl]};\n  padding-right: ${({ theme, $pr }) => $pr && theme.spacing[$pr]};\n  padding-top: ${({ theme, $pt }) => $pt && theme.spacing[$pt]};\n  padding-bottom: ${({ theme, $pb }) => $pb && theme.spacing[$pb]};\n\n  margin: ${({ theme, $margin }) => $margin && theme.spacing[$margin]};\n  border-radius: ${({ theme, $radius }) => $radius && theme.radius[$radius]};\n  ${({ $sx }) => $sx && $sx};\n`;\n\nexport default Box;\n"],"names":[],"sourceRoot":""}