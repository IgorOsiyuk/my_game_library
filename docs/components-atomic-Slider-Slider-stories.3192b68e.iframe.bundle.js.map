{"version":3,"file":"components-atomic-Slider-Slider-stories.3192b68e.iframe.bundle.js","mappings":";;;AAKA;AACA;;AAEA;;;;;AAOA;AACA;AACA;AACA;;;AAKA;AACA;;;AAGA;;;;;;;;AAQA;;;;;;;;;;AAcA;;;;;;ACtCA;ACiBA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","sources":["webpack://web/./src/components/atomic/Slider/style.ts","webpack://web/./src/components/atomic/Slider/index.tsx","webpack://web/./src/components/atomic/Box/index.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst SliderTrack = styled.div`\n  width: 100%;\n  height: 4px;\n  background: ${({ theme }) => theme.colors.grey};\n  border-radius: ${({ theme }) => theme.radius.rounded_medium};\n  position: relative;\n`;\n\nconst SliderProgress = styled.div<{ $progress: number }>`\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: ${({ $progress }) => $progress}%;\n  background: ${({ theme }) => theme.colors.accent2};\n  border-radius: ${({ theme }) => theme.radius.rounded_medium};\n`;\n\nconst SliderThumb = styled.div<{ $progress: number }>`\n  width: 14px;\n  height: 14px;\n  background: ${({ theme }) => theme.colors.accent2};\n  border-radius: ${({ theme }) => theme.radius.rounded_circle};\n  position: absolute;\n  top: 50%;\n  left: ${({ $progress }) => $progress}%;\n  transform: translate(-50%, -50%);\n  cursor: pointer;\n  transition: transform 0.2s;\n\n  &:hover {\n    transform: translate(-50%, -50%) scale(1.2);\n  }\n`;\n\nconst HiddenInput = styled.input`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  cursor: pointer;\n  margin: 0;\n  padding: 0;\n`;\n\nconst SliderWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  position: relative;\n  height: 14px;\n`;\n\nexport { HiddenInput, SliderProgress, SliderThumb, SliderTrack, SliderWrapper };\n","import { ChangeEvent, useEffect, useState } from 'react';\nimport * as S from './style';\n\ninterface SliderProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  defaultValue?: number;\n  onChange: (value: number) => void;\n}\n\nexport const Slider = ({ min = 0, max = 5, step = 0.1, defaultValue = 0, onChange }: SliderProps) => {\n  const [value, setValue] = useState(defaultValue);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const newValue = parseFloat(event.target.value);\n    setValue(newValue);\n    onChange(newValue);\n  };\n\n  useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n\n  const progress = ((value - min) / (max - min)) * 100;\n\n  return (\n    <S.SliderWrapper>\n      <S.SliderTrack>\n        <S.SliderProgress $progress={progress} />\n      </S.SliderTrack>\n      <S.SliderThumb $progress={progress} />\n      <S.HiddenInput type=\"range\" min={min} max={max} step={step} value={value} onChange={handleChange} />\n    </S.SliderWrapper>\n  );\n};\n","import { Colors } from '@/styles/colors';\nimport { Radius } from '@/styles/radius';\nimport { Spacing } from '@/styles/spacing';\nimport styled, { css, ExecutionContext } from 'styled-components';\n\ninterface BoxProps {\n  $width?: string;\n  $height?: string;\n  $backgroundColor?: keyof Colors;\n  $padding?: keyof Spacing;\n  $px?: keyof Spacing;\n  $py?: keyof Spacing;\n  $pl?: keyof Spacing;\n  $pr?: keyof Spacing;\n  $pt?: keyof Spacing;\n  $pb?: keyof Spacing;\n  $margin?: keyof Spacing;\n  $mx?: keyof Spacing;\n  $my?: keyof Spacing;\n  $ml?: keyof Spacing;\n  $mr?: keyof Spacing;\n  $mt?: keyof Spacing;\n  $mb?: keyof Spacing;\n  $radius?: keyof Radius;\n  $sx?: ((context: ExecutionContext) => ReturnType<typeof css>) | ReturnType<typeof css>;\n}\n\nconst Box = styled.div<BoxProps>`\n  width: ${({ $width }) => $width};\n  height: ${({ $height }) => $height};\n  background-color: ${({ theme, $backgroundColor }) =>\n    $backgroundColor ? theme.colors[$backgroundColor] : 'transparent'};\n\n  padding: ${({ theme, $padding, $px, $py }) =>\n    $padding ? theme.spacing[$padding] : `${$py ? theme.spacing[$py] : '0'} ${$px ? theme.spacing[$px] : '0'}`};\n  padding-left: ${({ theme, $pl }) => $pl && theme.spacing[$pl]};\n  padding-right: ${({ theme, $pr }) => $pr && theme.spacing[$pr]};\n  padding-top: ${({ theme, $pt }) => $pt && theme.spacing[$pt]};\n  padding-bottom: ${({ theme, $pb }) => $pb && theme.spacing[$pb]};\n\n  margin: ${({ theme, $margin, $mx, $my }) =>\n    $margin ? theme.spacing[$margin] : `${$my ? theme.spacing[$my] : '0'} ${$mx ? theme.spacing[$mx] : '0'}`};\n  margin-left: ${({ theme, $ml }) => $ml && theme.spacing[$ml]};\n  margin-right: ${({ theme, $mr }) => $mr && theme.spacing[$mr]};\n  margin-top: ${({ theme, $mt }) => $mt && theme.spacing[$mt]};\n  margin-bottom: ${({ theme, $mb }) => $mb && theme.spacing[$mb]};\n\n  border-radius: ${({ theme, $radius }) => $radius && theme.radius[$radius]};\n  ${({ $sx }) => $sx && $sx};\n`;\n\nexport default Box;\n"],"names":[],"sourceRoot":""}