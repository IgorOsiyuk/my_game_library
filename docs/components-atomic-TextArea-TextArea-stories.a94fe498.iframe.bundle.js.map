{"version":3,"file":"components-atomic-TextArea-TextArea-stories.a94fe498.iframe.bundle.js","mappings":";AAGA;AAkBA;;AAfA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AAIA;AASA;AAPA;AACA;AACA;AACA;;AAEA;;;;;;ACVA;ACEA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","sources":["webpack://web/./src/components/atomic/TextArea/style.ts","webpack://web/./src/components/atomic/TextArea/TextArea.stories.tsx","webpack://web/./src/components/atomic/Box/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\nconst TextArea = styled.textarea<{ $isError?: boolean }>`\n  ${({ theme, $isError }) => {\n    return css`\n      display: block;\n      background-color: ${theme.colors.darkSecondary};\n      padding: ${theme.spacing.s_12} ${theme.spacing.s_18};\n      padding-bottom: ${theme.spacing.s_4};\n      padding-right: ${theme.spacing.s_4};\n      border-radius: ${theme.radius.rounded_small};\n      border-width: 1px;\n      border-style: solid;\n      border-color: ${$isError ? theme.colors.red : theme.colors.grey};\n      font-size: ${theme.fontSizes.body_M};\n      font-weight: ${theme.fontWeights.light};\n      color: ${theme.colors.white};\n      width: 100%;\n      height: 100%;\n    `;\n  }}\n`;\nconst Error = styled.div`\n  ${({ theme }) => {\n    return css`\n      padding: ${theme.spacing.s_8} ${theme.spacing.s_12};\n      font-size: ${theme.fontSizes.tech};\n      font-weight: ${theme.fontWeights.medium};\n      color: ${theme.colors.red};\n      width: 100%;\n    `;\n  }}\n`;\n\nexport { Error, TextArea };\n","import type { Meta, StoryObj } from '@storybook/react';\nimport { css } from 'styled-components';\nimport Box from '../Box';\nimport TextArea from './index';\n\nconst meta: Meta<typeof TextArea> = {\n  title: 'Atomic/TextArea',\n  component: TextArea,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  decorators: [\n    (Story) => (\n      <Box\n        $sx={css`\n          height: 300px;\n          width: 300px;\n        `}\n      >\n        <Story />\n      </Box>\n    ),\n  ],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof TextArea>;\n\nexport const Default: Story = {\n  args: {\n    name: 'default',\n    placeholder: 'Введите текст',\n  },\n};\n\nexport const WithValue: Story = {\n  args: {\n    name: 'withValue',\n    placeholder: 'Описание',\n    value: 'Это пример текста в TextArea. Здесь может быть длинный текст, который занимает несколько строк.',\n    onChange: (e) => console.log('TextArea value:', e.target.value),\n  },\n};\n\nexport const WithError: Story = {\n  args: {\n    name: 'withError',\n    placeholder: 'Комментарий',\n    value: '',\n    isError: true,\n    error: 'Это поле обязательно для заполнения',\n    onChange: (e) => console.log('TextArea value:', e.target.value),\n  },\n};\n","import { Colors } from '@/styles/colors';\nimport { Radius } from '@/styles/radius';\nimport { Spacing } from '@/styles/spacing';\nimport styled, { css, ExecutionContext } from 'styled-components';\n\ninterface BoxProps {\n  $width?: string;\n  $height?: string;\n  $backgroundColor?: keyof Colors;\n  $padding?: keyof Spacing;\n  $px?: keyof Spacing;\n  $py?: keyof Spacing;\n  $pl?: keyof Spacing;\n  $pr?: keyof Spacing;\n  $pt?: keyof Spacing;\n  $pb?: keyof Spacing;\n  $margin?: keyof Spacing;\n  $radius?: keyof Radius;\n  $sx?: ((context: ExecutionContext) => ReturnType<typeof css>) | ReturnType<typeof css>;\n}\n\nconst Box = styled.div<BoxProps>`\n  width: ${({ $width }) => $width};\n  height: ${({ $height }) => $height};\n  background-color: ${({ theme, $backgroundColor }) =>\n    $backgroundColor ? theme.colors[$backgroundColor] : 'transparent'};\n\n  padding: ${({ theme, $padding, $px, $py }) =>\n    $padding ? theme.spacing[$padding] : `${$py ? theme.spacing[$py] : '0'} ${$px ? theme.spacing[$px] : '0'}`};\n  padding-left: ${({ theme, $pl }) => $pl && theme.spacing[$pl]};\n  padding-right: ${({ theme, $pr }) => $pr && theme.spacing[$pr]};\n  padding-top: ${({ theme, $pt }) => $pt && theme.spacing[$pt]};\n  padding-bottom: ${({ theme, $pb }) => $pb && theme.spacing[$pb]};\n\n  margin: ${({ theme, $margin }) => $margin && theme.spacing[$margin]};\n  border-radius: ${({ theme, $radius }) => $radius && theme.radius[$radius]};\n  ${({ $sx }) => $sx && $sx};\n`;\n\nexport default Box;\n"],"names":[],"sourceRoot":""}